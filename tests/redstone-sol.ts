import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { RedstoneSol } from "../target/types/redstone_sol";
import * as fs from "fs";
import * as path from "path";

const samplePayload = Buffer.from([
  69, 84, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 53, 155, 248, 46, 128, 1, 145, 250, 140, 254, 240, 0,
  0, 0, 32, 0, 0, 1, 161, 162, 188, 55, 47, 74, 172, 145, 114, 29, 192, 69, 152,
  87, 67, 0, 228, 175, 227, 148, 23, 95, 220, 229, 14, 53, 158, 9, 32, 77, 176,
  111, 92, 10, 123, 54, 222, 115, 142, 100, 110, 21, 122, 172, 38, 145, 231, 69,
  133, 238, 49, 1, 147, 59, 11, 180, 26, 22, 132, 139, 206, 213, 36, 166, 28,
  69, 84, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 53, 155, 248, 46, 128, 1, 145, 250, 140, 254, 240, 0,
  0, 0, 32, 0, 0, 1, 104, 36, 71, 142, 200, 109, 149, 152, 174, 92, 1, 127, 254,
  170, 204, 110, 239, 101, 73, 85, 247, 231, 186, 106, 0, 198, 80, 9, 61, 175,
  101, 104, 67, 126, 30, 36, 109, 52, 49, 132, 128, 35, 86, 53, 227, 218, 207,
  55, 219, 193, 223, 6, 179, 125, 64, 226, 101, 64, 87, 142, 111, 194, 130, 133,
  27, 69, 84, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 155, 248, 46, 128, 1, 145, 250, 140, 254, 240,
  0, 0, 0, 32, 0, 0, 1, 100, 141, 42, 61, 212, 32, 251, 195, 14, 172, 235, 93,
  79, 110, 142, 23, 12, 172, 235, 198, 109, 244, 31, 74, 61, 223, 53, 111, 32,
  236, 216, 141, 50, 117, 188, 161, 249, 242, 116, 229, 254, 240, 184, 141, 225,
  96, 55, 197, 118, 115, 175, 4, 45, 91, 231, 59, 26, 111, 157, 44, 33, 213,
  178, 130, 28, 66, 84, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 88, 200, 17, 139, 86, 1, 145, 250, 140,
  254, 240, 0, 0, 0, 32, 0, 0, 1, 82, 8, 92, 211, 199, 78, 154, 182, 177, 22,
  34, 99, 96, 239, 37, 244, 24, 133, 148, 8, 248, 93, 130, 183, 93, 158, 111,
  161, 199, 108, 71, 131, 60, 167, 185, 240, 234, 212, 23, 71, 15, 50, 241, 187,
  196, 146, 97, 95, 98, 85, 25, 75, 217, 134, 87, 101, 13, 211, 39, 0, 89, 97,
  160, 210, 27, 66, 84, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 88, 200, 2, 73, 112, 1, 145, 250, 140,
  254, 240, 0, 0, 0, 32, 0, 0, 1, 222, 182, 82, 126, 32, 74, 86, 210, 151, 45,
  242, 93, 183, 103, 72, 178, 17, 133, 21, 118, 43, 49, 229, 120, 141, 118, 157,
  58, 179, 160, 231, 225, 102, 100, 116, 142, 202, 234, 121, 216, 105, 100, 214,
  137, 62, 111, 167, 227, 164, 76, 197, 46, 234, 249, 140, 81, 132, 13, 174, 5,
  16, 70, 248, 49, 28, 66, 84, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 88, 200, 2, 73, 112, 1, 145, 250,
  140, 254, 240, 0, 0, 0, 32, 0, 0, 1, 97, 84, 53, 111, 35, 248, 160, 21, 158,
  133, 76, 82, 59, 153, 102, 29, 141, 248, 99, 72, 77, 16, 32, 151, 223, 246,
  207, 175, 51, 83, 99, 67, 77, 10, 151, 41, 112, 93, 39, 81, 188, 63, 38, 182,
  246, 68, 103, 175, 20, 125, 56, 50, 39, 91, 81, 132, 158, 24, 107, 249, 248,
  14, 104, 4, 27, 0, 6, 0, 0, 0, 0, 0, 2, 237, 87, 1, 30, 0, 0,
]);

describe("redstone-sol", () => {
  anchor.setProvider(anchor.AnchorProvider.env());

  const program = anchor.workspace.RedstoneSol as Program<RedstoneSol>;

  it("Processes Redstone payload successfully", async () => {
    // Read the payload from the file
    // const payloadPath = path.join(__dirname, "..", "sample-payload.hex");
    // const payloadHex = fs.readFileSync(payloadPath, "utf8").trim();
    // const payload = Buffer.from(payloadHex, "hex");
    // console.log("Payload:", payload.length, payload.byteLength);

    try {
      // Process the payload
      const tx = await program.methods
        .processRedstonePayload(samplePayload)
        .accounts({
          user: anchor.AnchorProvider.env().wallet.publicKey,
        })
        .rpc();

      console.log("Transaction signature:", tx);

      // If we reach this point without throwing an error, the test passed
      console.log("Payload processed successfully");
    } catch (error) {
      console.error("Error processing payload:", error);
      throw error; // Re-throw the error to fail the test
    }
  });
});
